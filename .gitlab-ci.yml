workflow:
  name: "Solar System NodeJS Pipeline"
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /^feature/
      when: always
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature/ && $CI_PIPELINE_SOURCE == "merge_request_event"

stages:
  - test
  - containerization
  - dev_deploy

variables:
  K8S_IMAGE: $DOCKER_USER/solar_system:$IMAGE_VERSION
  DOCKER_USER: $DOCKER_USERNAME
  IMAGE_VERSION: $CI_PIPELINE_ID
  MONGO_URI: mongodb://superuser:$PASSWORD@192.168.100.47:27017/solar_system

.prepare_nodejs_environment:
    tags:
      - "linux_ubuntu_docker"
    stage: test
    image: node:18-alpine3.14
    services:
    - name: saadzahid/solarsystem-mongodb-test:01  # To run separate db container for testing purpose
      alias: mongo
      pull_policy: always
    variables:
      MONGO_URI: mongodb://test-user:test-user-1@mongo:27017/solar_system
    before_script:
        - npm install # Installing required dependencies
  
unit_testing:
    extends: .prepare_nodejs_environment
    script:
        - npm test  # Testing the code 
    cache:
      policy: pull-push
      when: on_success
      paths:
        - node_modules
      key:
        files:
          - package-lock.json
        prefix: node_modules

    artifacts:
      when: always  # Artifacts will store always (on_success and on_failure both)
      expire_in: 3 days # Artifacts will delete automatically after mentioned time
      name: "Moca-Test-Results"
      paths:
        - "test-results.xml"  # Filename where artifacts will be stored
      reports:
        junit: "test-results.xml" # Filename where artifacts junit test reports will store.

code_coverage:
    extends: .prepare_nodejs_environment
    script:
        - npm run coverage  # Running Code Coverage Test Cases
    cache:
      policy: pull-push
      when: on_success
      paths:
        - coverage
      key:
        files:
          - coverage/cobertura-coverage.xml
        prefix: coverage

    artifacts:
      name: "Code Coverage Test Results"
      when: always
      expire_in: 3 days
      reports:
        coverage_report:
          coverage_format: cobertura
          path: "coverage/cobertura-coverage.xml"
    coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ # Coverage Pattern to store artifacts data of nyc coverage test
    allow_failure: true
    
docker_build:
  stage: containerization
  tags:
    - "linux_ubuntu_docker"
  image: docker:28.2.2
  dependencies: [] # Doesn't require any artifacts from previous jobs
  services:
    - docker:28.2.2-dind # Docker in Docker image
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""  # Disable TLS to simplify communication
  script:
    - docker info  # Optional, to debug
    - docker build -t $DOCKER_USER/solar_system:$IMAGE_VERSION . # Building image with pipeline tag as version of image
    - docker images $DOCKER_USER/solar_system:$IMAGE_VERSION
    - mkdir image
    - docker save $DOCKER_USER/solar_system:$IMAGE_VERSION > image/solar-system-image:$IMAGE_VERSION.tar
  artifacts: # building artifacts which will be require in next docker_test job to test the image 
    when: always
    expire_in: 3 days
    paths:
      - "image" # saving artifacts in image directory 

docker_test:
  stage: containerization
  needs:
    - docker_build
  tags:
    - "linux_ubuntu_docker"
  image: docker:28.2.2
  services:
  - name: docker:28.2.2-dind # Docker in Docker image
    alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375 # To connect to the container inside container daemon running on non TLS port 2375
    DOCKER_TLS_CERTDIR: ""  # Disable TLS to simplify communication 
  
  script:
    - docker load -i image/solar-system-image:$IMAGE_VERSION.tar
    - docker run --name solar-system-app -d -p 3000:3000 $DOCKER_USER/solar_system:$IMAGE_VERSION
    - export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
    - echo $IP
    - docker run alpine wget -q -O - http://$IP:3000/live | grep live

docker_push:
  stage: containerization
  needs:
    - docker_build
    - docker_test
  tags:
    - "linux_ubuntu_docker"
  image: docker:28.2.2
  services:
  - name: docker:28.2.2-dind # Docker in Docker image
    alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375 # To connect to the container inside container daemon running on non TLS port 2375
    DOCKER_TLS_CERTDIR: ""  # Disable TLS to simplify communication 
  
  script:
    - docker load -i image/solar-system-image:$IMAGE_VERSION.tar
    - docker login --username=$DOCKER_USER --password=$DOCKER_PASSWORD
    - docker push $DOCKER_USER/solar_system:$IMAGE_VERSION

k8s_dev_deploy:
  tags:
    - linux_ubuntu_docker
  stage: dev_deploy
  needs:
    - docker_push
  image: alpine:3.18
  dependencies: []
  before_script:
    - wget https://storage.googleapis.com/kubernetes-release/release/$(wget -q -O - https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/bin/kubectl
    - kubectl version --client
    - apk add --no-cache gettext
    - envsubst -V
    
  script:
    - export KUBECONFIG="$DEV_KUBE_CONFIG"
    - kubectl version -o yaml
    - kubectl get nodes -o wide
    - export INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
    - echo $INGRESS_IP
    - kubectl -n $NAMESPACE create secret generic mongo-db-creds --from-literal=MONGO_URI=$MONGO_URI --save-config --dry-run=client -o yaml | kubectl apply -f -
    - for i in kubernetes/development/*.yaml; do envsubst < $i | kubectl apply -f -; done
    - kubectl -n $NAMESPACE get all,secret,ing
    - echo "INGRESS_URL=$(kubectl -n $NAMESPACE get ing -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> app_ingress_url.env

  artifacts:
    reports:
      dotenv: app_ingress_url.env
  environment:
    name: development
    url: https://$INGRESS_URL

k8s_dev_integration_testing:
  stage: dev_deploy
  needs:
    - k8s_dev_deploy
  image: alpine:3.18
  before_script:
    - apk add --no-cache curl
    - apk add --no-cache jq #jq is used to grep text specifically from json text
  script:
    - echo $INGRESS_URL
    - curl -s -k https://$INGRESS_URL/live | jq -r .status | grep -i live
    - curl -s -k https://$INGRESS_URL/ready | jq -r .status | grep -i ready



